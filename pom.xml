<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.3</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.spt-development</groupId>
	<artifactId>spt-development-micrometer-tracing-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>spt-development-micrometer-tracing-demo</name>
	<description>Demo project for SPT Development projects integrated with Micrometer tracing</description>

	<scm>
		<url>https://github.com/spt-development/${project.artifactId}</url>
		<connection>scm:git:git://github.com/spt-development/${project.artifactId}.git</connection>
		<developerConnection>scm:git:git@github.com:spt-development/${project.artifactId}.git</developerConnection>
	</scm>

	<properties>
		<maven.compiler.release>17</maven.compiler.release>

		<!-- Maven version -->
		<maven.min.version>3.9.4</maven.min.version>

		<!-- Dependency versions -->
		<commons-collections.version>4.4</commons-collections.version>
		<commons-logging.version>1.3.4</commons-logging.version>
		<findbugs-jsr305.version>3.0.2</findbugs-jsr305.version>
		<spt-development-audit-spring-boot.version>3.3.3</spt-development-audit-spring-boot.version>
		<spt-development-logging-spring-boot.version>3.3.3</spt-development-logging-spring-boot.version>

		<!-- Test dependency versions -->
		<awaitility.version>4.2.2</awaitility.version>
		<cucumber.version>7.18.1</cucumber.version>
		<junit-platform.version>1.11.0</junit-platform.version>
		<spt-development-test.version>3.1.10</spt-development-test.version>

		<!-- Spring Boot overrides to fix security vulnerabilities -->
		<artemis.version>2.37.0</artemis.version>

		<!-- Plugin versions -->
		<checkstyle-maven-plugin.version>3.5.0</checkstyle-maven-plugin.version>
		<dependency-check-maven.version>10.0.4</dependency-check-maven.version>
		<jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
		<license-maven-plugin.version>2.4.0</license-maven-plugin.version>
		<maven-jxr-plugin.version>3.5.0</maven-jxr-plugin.version>
		<maven-pmd-plugin.version>3.25.0</maven-pmd-plugin.version>
		<maven-scm-plugin.version>2.1.0</maven-scm-plugin.version>
		<pitest-maven.version>1.16.3</pitest-maven.version>
		<spotbugs-plugin.version>4.8.6.3</spotbugs-plugin.version>

		<!-- Plugin dependencies -->
		<checkstyle.version>10.18.1</checkstyle.version>
		<findbugs-slf4j-bug-pattern.version>1.5.0</findbugs-slf4j-bug-pattern.version>
		<findbugs-sec-bug-pattern.version>1.12.0</findbugs-sec-bug-pattern.version>
		<pitest-junit5-plugin.version>1.2.1</pitest-junit5-plugin.version>
		<pmd.version>7.5.0</pmd.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Test BOMs -->
			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-bom</artifactId>
				<version>${cucumber.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- Dependencies added to avoid dependency convergence errors -->
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${commons-logging.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Spring dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-artemis</artifactId>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<scope>runtime</scope>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>

		<!-- Spring third-party dependencies -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing</artifactId>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-brave</artifactId>
			<scope>runtime</scope>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>artemis-jakarta-server</artifactId>
			<scope>runtime</scope>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>

		<!-- SPT dependencies -->
		<dependency>
			<groupId>com.spt-development</groupId>
			<artifactId>spt-development-audit-spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.spt-development</groupId>
					<artifactId>spt-development-cid</artifactId>
				</exclusion>
			</exclusions>
			<version>${spt-development-audit-spring-boot.version}</version>
		</dependency>
		<dependency>
			<groupId>com.spt-development</groupId>
			<artifactId>spt-development-logging-spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.spt-development</groupId>
					<artifactId>spt-development-cid</artifactId>
				</exclusion>
			</exclusions>
			<version>${spt-development-logging-spring-boot.version}</version>
		</dependency>

		<!-- Third party dependencies -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>${commons-collections.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>${findbugs-jsr305.version}</version>
		</dependency>

		<!-- Spring test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<!-- Version defined in parent dependencyManagement section -->
		</dependency>

		<!-- SPT test dependencies -->
		<dependency>
			<groupId>com.spt-development</groupId>
			<artifactId>spt-development-test</artifactId>
			<version>${spt-development-test.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Third-party test dependencies -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-core</artifactId>
			<scope>test</scope>
			<!-- Version defined in cucumber bom, imported in dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<scope>test</scope>
			<!-- Version defined in cucumber bom, imported in dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<scope>test</scope>
			<!-- Version defined in cucumber bom, imported in dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit-platform-engine</artifactId>
			<scope>test</scope>
			<!-- Version defined in cucumber bom, imported in dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-spring</artifactId>
			<scope>test</scope>
			<!-- Version defined in cucumber bom, imported in dependencyManagement section -->
		</dependency>
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>${awaitility.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite</artifactId>
			<version>${junit-platform.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<!-- Plugins used in custom profiles, added so that new versions are detected yb the versions plugin -->
				<plugin>
					<artifactId>maven-pmd-plugin</artifactId>
					<version>${maven-pmd-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>net.sourceforge.pmd</groupId>
							<artifactId>pmd-core</artifactId>
							<version>${pmd.version}</version>
						</dependency>
						<dependency>
							<groupId>net.sourceforge.pmd</groupId>
							<artifactId>pmd-java</artifactId>
							<version>${pmd.version}</version>
						</dependency>
						<dependency>
							<groupId>net.sourceforge.pmd</groupId>
							<artifactId>pmd-javascript</artifactId>
							<version>${pmd.version}</version>
						</dependency>
						<dependency>
							<groupId>net.sourceforge.pmd</groupId>
							<artifactId>pmd-jsp</artifactId>
							<version>${pmd.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.pitest</groupId>
					<artifactId>pitest-maven</artifactId>
					<version>${pitest-maven.version}</version>
					<dependencies>
						<dependency>
							<groupId>org.pitest</groupId>
							<artifactId>pitest-junit5-plugin</artifactId>
							<version>${pitest-junit5-plugin.version}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>parse-version</id>
						<goals>
							<goal>parse-version</goal>
						</goals>
					</execution>
				</executions>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<showWarnings>true</showWarnings>
					<compilerArgs>
						<arg>-Xlint:all</arg>
						<arg>-Xlint:-processing</arg>
						<arg>-Werror</arg>
					</compilerArgs>
				</configuration>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>analyze</id>
						<goals>
							<goal>analyze-only</goal>
						</goals>
						<configuration>
							<failOnWarning>true</failOnWarning>
							<ignoreNonCompile>true</ignoreNonCompile>
							<ignoreAllNonTestScoped>true</ignoreAllNonTestScoped>
							<!--
                                 Only include false positives. On the whole these will be transitive dependencies
                                 of test scoped artifacts and compile time artifacts.
                              -->
							<ignoredNonTestScopedDependencies>ch.qos.logback:logback-core,ch.qos.logback:logback-classic</ignoredNonTestScopedDependencies>
							<!--
                                 Only include false positives and starters that can't be resolved by setting the
                                 scope to runtime.
                              -->
							<ignoredUnusedDeclaredDependencies>com.spt-development:*-spring-boot-starter::,org.springframework.boot:spring-boot-starter-*::,org.springframework.boot:spring-boot-docker-compose</ignoredUnusedDeclaredDependencies>
							<!--
                                 Ignoring all used undeclared dependencies as it goes against the design
                                 of Spring Boot and results in a much larger than otherwise necessary pom.
                              -->
							<ignoredUsedUndeclaredDependencies>:::</ignoredUsedUndeclaredDependencies>
						</configuration>
					</execution>
				</executions>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce</id>
						<phase>compile</phase>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<dependencyConvergence/>
								<requireFilesExist>
									<files>
										<!-- Minimum set of documentation required -->
										<file>${project.basedir}/README.md</file>
										<file>${project.basedir}/documentation/releases/release-${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.md</file>
									</files>
								</requireFilesExist>
								<requireMavenVersion>
									<version>${maven.min.version}</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle-maven-plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.puppycrawl.tools</groupId>
						<artifactId>checkstyle</artifactId>
						<version>${checkstyle.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<consoleOutput>true</consoleOutput>
					<failsOnError>true</failsOnError>
					<violationSeverity>warning</violationSeverity>
				</configuration>
				<executions>
					<execution>
						<id>google-checks</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<configLocation>google_checks.xml</configLocation>
							<suppressionsLocation>config/checkstyle/google_checks_suppressions.xml</suppressionsLocation>
						</configuration>
					</execution>
					<execution>
						<id>spt-checks</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<configLocation>config/checkstyle/spt_checks.xml</configLocation>
							<suppressionsLocation>config/checkstyle/spt_checks_suppressions.xml</suppressionsLocation>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<!--
                         classesDirectory is required to work around a bug that is discussed at
                         https://github.com/spring-projects/spring-boot/issues/6254. There are a number of different
                         workarounds, but this seems to be the cleanest.
                      -->
					<classesDirectory>${project.build.outputDirectory}</classesDirectory>
					<trimStackTrace>false</trimStackTrace>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<trimStackTrace>false</trimStackTrace>
					<includes>
						<include>**/*Test.java</include>
					</includes>
					<excludes>
						<exclude>**/*IT.java</exclude>
					</excludes>
				</configuration>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>${spotbugs-plugin.version}</version>
				<configuration>
					<effort>Max</effort>
					<threshold>Low</threshold>
					<xmlOutput>false</xmlOutput>
					<plugins>
						<plugin>
							<groupId>com.h3xstream.findsecbugs</groupId>
							<artifactId>findsecbugs-plugin</artifactId>
							<version>${findbugs-sec-bug-pattern.version}</version>
						</plugin>
						<plugin>
							<groupId>jp.skypencil.findbugs.slf4j</groupId>
							<artifactId>bug-pattern</artifactId>
							<version>${findbugs-slf4j-bug-pattern.version}</version>
						</plugin>
					</plugins>
					<excludeFilterFile>${project.basedir}/config/findbugs/exclude.xml</excludeFilterFile>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<configuration>
					<outputFile>${project.build.directory}/dependency-versions.txt</outputFile>
					<rulesUri>file:///${project.basedir}/config/versions/version-rules.xml</rulesUri>
				</configuration>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>build-info</id>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
				<!-- Version defined in spring-boot-parent pluginManagement section -->
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>before-unit-test-execution</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<includes>
								<include>com/spt/development/demo/**</include>
							</includes>
							<destFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</destFile>
						</configuration>
					</execution>
					<execution>
						<id>after-unit-test-execution</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-unit-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>before-integration-test-execution</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<includes>
								<include>com/spt/development/demo/**</include>
							</includes>
							<destFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</destFile>
						</configuration>
					</execution>
					<execution>
						<id>after-integration-test-execution</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-integration-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>merge-unit-and-integration</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>merge</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}/jacoco-output/</directory>
									<includes>
										<include>*.exec</include>
									</includes>
								</fileSet>
							</fileSets>
							<destFile>${project.build.directory}/jacoco-output/merged.exec</destFile>
						</configuration>
					</execution>
					<execution>
						<id>create-merged-report</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>CLASS</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>1.0</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
							<excludes>
								<exclude>com/spt/development/demo/DemoApplication.class</exclude>
							</excludes>
							<dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.owasp</groupId>
				<artifactId>dependency-check-maven</artifactId>
				<version>${dependency-check-maven.version}</version>
				<configuration>
					<!-- Assembly analyzer disabled because we don't have any .NET code/dlls -->
					<assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
					<!-- Node and retirejs analyzer disabled, because any js floating around isn't part of the main app -->
					<nodeAnalyzerEnabled>false</nodeAnalyzerEnabled>

					<failBuildOnCVSS>0</failBuildOnCVSS>
					<suppressionFiles>
						<suppressionFile>${project.basedir}/config/owasp/suppress.xml</suppressionFile>
					</suppressionFiles>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-scm-plugin</artifactId>
				<version>${maven-scm-plugin.version}</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- Additional quality gates not run by default when executing mvn clean verify, but are run by CI pipeline -->
			<id>all-quality-gates</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<configuration>
							<mutationThreshold>100</mutationThreshold>
							<excludedClasses>
								<param>com.spt.development.demo.config.**</param>
								<param>com.spt.development.demo.jms.**</param>
								<param>com.spt.development.demo.mvc.**</param>
								<param>com.spt.development.demo.repository.**</param>
							</excludedClasses>
						</configuration>
						<executions>
							<execution>
								<id>mutation-testing</id>
								<phase>verify</phase>
								<goals>
									<goal>mutationCoverage</goal>
								</goals>
							</execution>
						</executions>
						<!-- Version defined in pluginManagement section -->
					</plugin>
					<plugin>
						<artifactId>maven-pmd-plugin</artifactId>
						<configuration>
							<includeTests>false</includeTests>
							<printFailingErrors>true</printFailingErrors>
							<rulesets>
								<ruleset>config/pmd/rulesets/spt-default-rules.xml</ruleset>
								<ruleset>config/pmd/rulesets/spt-main-rules.xml</ruleset>
							</rulesets>
						</configuration>
						<executions>
							<execution>
								<id>pmd-main-check</id>
								<phase>validate</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
							<execution>
								<id>pmd-test-check</id>
								<phase>validate</phase>
								<goals>
									<goal>pmd</goal>
									<goal>check</goal>
								</goals>
								<configuration>
									<targetDirectory>${project.build.directory}/pmdTest/</targetDirectory>
									<includeTests>true</includeTests>
									<excludeRoots>
										<excludeRoot>${basedir}/src/main/java</excludeRoot>
									</excludeRoots>
									<rulesets>
										<ruleset>config/pmd/rulesets/spt-default-rules.xml</ruleset>
										<ruleset>config/pmd/rulesets/spt-test-rules.xml</ruleset>
									</rulesets>
								</configuration>
							</execution>
							<execution>
								<id>cpd-check</id>
								<phase>validate</phase>
								<goals>
									<goal>cpd-check</goal>
								</goals>
							</execution>
						</executions>
						<!-- Version defined in pluginManagement section -->
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>compile</phase>
								<goals>
									<goal>add-third-party</goal>
								</goals>
								<configuration>
									<failOnBlacklist>true</failOnBlacklist>
									<licenseMerges>
										<!-- Aggregate different ways to write acceptable licenses -->
										<licenseMerge>CC0 1.0 Universal (CC0 1.0) Public Domain Dedication|
											Public Domain, per Creative Commons CC0|Public Domain
										</licenseMerge>
										<licenseMerge>Eclipse Distribution License - v1.0|
											Eclipse Distribution License - v 1.0
										</licenseMerge>
										<licenseMerge>Eclipse Public License - v1.0|
											Eclipse Public License 1.0|Eclipse Public License - v 1.0|EDL 1.0|EPL 1.0
										</licenseMerge>
										<licenseMerge>Eclipse Public License - v2.0|
											Eclipse Public License 2.0|Eclipse Public License v2.0|EPL 2.0|
											Eclipse Public License - v 2.0
										</licenseMerge>
										<licenseMerge>Mozilla Public License Version 2.0|MPL 2.0</licenseMerge>
										<licenseMerge>The 2-Clause BSD License|BSD-2-Clause
										</licenseMerge>
										<licenseMerge>The 3-Clause BSD License|BSD License 3|BSD-3-Clause
										</licenseMerge>
										<licenseMerge>The Apache Software License, Version 2.0|Apache2|
											Apache-2.0|Apache 2|APL2|Apache 2.0|Apache License, Version 2.0|
											The Apache License, Version 2.0|Apache Software License - Version 2.0|
											the Apache License, ASL Version 2.0|ASL 2.0|Apache License 2.0|ASL, version 2
										</licenseMerge>
										<licenseMerge>The MIT License|
											MIT license|The MIT License (MIT)|MIT License|MIT|MIT-style
										</licenseMerge>
									</licenseMerges>
									<includedLicenses>
										<!-- To get an idea of risk, see - https://www.synopsys.com/blogs/software-security/top-open-source-licenses/ -->
										<includedLicense>CC0 1.0 Universal (CC0 1.0) Public Domain Dedication</includedLicense>
										<includedLicense>Eclipse Distribution License - v1.0</includedLicense>
										<includedLicense>Eclipse Public License - v1.0</includedLicense>
										<includedLicense>Eclipse Public License - v2.0</includedLicense>
										<includedLicense>Mozilla Public License Version 2.0</includedLicense>
										<includedLicense>The 2-Clause BSD License</includedLicense>
										<includedLicense>The 3-Clause BSD License</includedLicense>
										<includedLicense>The Apache Software License, Version 2.0</includedLicense>
										<includedLicense>The MIT License</includedLicense>
									</includedLicenses>
								</configuration>
							</execution>
						</executions>
						<!-- Version defined in pluginManagement section -->
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${maven-jxr-plugin.version}</version>
			</plugin>
		</plugins>
	</reporting>
</project>
